name: Auto Generate and Run Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  generate-and-run-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install azure-openai
        pip install langchain
        pip install pytest-cov
        # Add any other dependencies your project needs
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Run test generator script
      env:
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      run: |
        # Run the test generator script from the scripts directory
        python scripts/test_generator.py
        
    - name: Run generated tests
      run: |
        python -m pytest -v --cov=./ --cov-report=xml --cov-report=term

    - name: Create test summary report
      if: always()  # Run even if tests fail
      run: |
        echo "# Test Results Summary" > test_report.md
        echo "" >> test_report.md
        echo "## Generated Test Files" >> test_report.md
        echo "" >> test_report.md
        if [ -f test_generation_summary.json ]; then
          echo "The following test files were generated:" >> test_report.md
          echo "" >> test_report.md
          cat test_generation_summary.json | python -c "import json, sys; data = json.load(sys.stdin); print('\n'.join(['- ' + file for file in data['test_files']]))" >> test_report.md
          echo "" >> test_report.md
          echo "Total files analyzed: $(cat test_generation_summary.json | python -c 'import json, sys; print(json.load(sys.stdin)["total_files_analyzed"])')" >> test_report.md
          echo "Tests generated: $(cat test_generation_summary.json | python -c 'import json, sys; print(json.load(sys.stdin)["tests_generated"])')" >> test_report.md
        else
          echo "No test generation summary available." >> test_report.md
        fi
        
        echo "" >> test_report.md
        echo "## Test Execution Results" >> test_report.md
        echo "" >> test_report.md
        if [ -f coverage.xml ]; then
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])")
          COVERAGE_PCT=$(python -c "print(round(float('${COVERAGE}') * 100, 2))")
          echo "Overall code coverage: ${COVERAGE_PCT}%" >> test_report.md
        else
          echo "No coverage information available." >> test_report.md
        fi
        
        cat test_report.md
        
    - name: Upload test report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-report
        path: |
          test_report.md
          test_generation_summary.json
          coverage.xml
